#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

apiVersion: apps/v1
kind: StatefulSet
metadata:
  {{- if .Values.namespace }}
  namespace: {{ .Values.namespace }}
  {{- end }}
  name: {{ .Release.Name }}
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}
  serviceName: {{ .Release.Name }}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
      annotations:
        checksum/config: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
    spec:
      {{- if .Values.imagePullSecrets }}
      imagePullSecrets:
        - name: {{ .Release.Name }}
      {{- end }}
      serviceAccountName: {{ .Release.Name }}
      securityContext:
        runAsUser: 0
      containers:
        - name: {{ .Release.Name }}
          image: {{ .Values.image }}
          imagePullPolicy: {{ .Values.imagePullPolicy }}
          readinessProbe:
            tcpSocket:
              port: {{ .Values.port }}
            initialDelaySeconds: 30
            periodSeconds: 3
          livenessProbe:
            tcpSocket:
              port: {{ .Values.port }}
            initialDelaySeconds: 30
            periodSeconds: 10
          resources:
            limits:
              cpu: {{ .Values.cpu }}
              memory: {{ .Values.memory }}
          command: ["/opt/bitnami/prometheus/bin/prometheus"]
          args:
            - '--storage.tsdb.retention=30d'
            - '--config.file=/etc/prometheus/prometheus.yaml'
            - '--web.config.file=/etc/prometheus/web.yaml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.enable-lifecycle'
          ports:
            - name: prometheus
              containerPort: 9090
          volumeMounts:
            - name: {{ .Release.Name }}-data
              mountPath: /prometheus
              subPath: data
            - name: {{ .Release.Name }}-config
              mountPath: /etc/prometheus
      volumes:
        - name: {{ .Release.Name }}-config
          configMap:
            name: {{ .Release.Name }}
  volumeClaimTemplates:
    - metadata:
        name: {{ .Release.Name }}-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        {{- if .Values.storageClassName }}
        storageClassName: {{ .Values.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.disk }}
